// gen

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/giolekva/pcloud/core/nebula/apis/nebula/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NebulaNodeLister helps list NebulaNodes.
// All objects returned here must be treated as read-only.
type NebulaNodeLister interface {
	// List lists all NebulaNodes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.NebulaNode, err error)
	// NebulaNodes returns an object that can list and get NebulaNodes.
	NebulaNodes(namespace string) NebulaNodeNamespaceLister
	NebulaNodeListerExpansion
}

// nebulaNodeLister implements the NebulaNodeLister interface.
type nebulaNodeLister struct {
	indexer cache.Indexer
}

// NewNebulaNodeLister returns a new NebulaNodeLister.
func NewNebulaNodeLister(indexer cache.Indexer) NebulaNodeLister {
	return &nebulaNodeLister{indexer: indexer}
}

// List lists all NebulaNodes in the indexer.
func (s *nebulaNodeLister) List(selector labels.Selector) (ret []*v1.NebulaNode, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NebulaNode))
	})
	return ret, err
}

// NebulaNodes returns an object that can list and get NebulaNodes.
func (s *nebulaNodeLister) NebulaNodes(namespace string) NebulaNodeNamespaceLister {
	return nebulaNodeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NebulaNodeNamespaceLister helps list and get NebulaNodes.
// All objects returned here must be treated as read-only.
type NebulaNodeNamespaceLister interface {
	// List lists all NebulaNodes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.NebulaNode, err error)
	// Get retrieves the NebulaNode from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.NebulaNode, error)
	NebulaNodeNamespaceListerExpansion
}

// nebulaNodeNamespaceLister implements the NebulaNodeNamespaceLister
// interface.
type nebulaNodeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NebulaNodes in the indexer for a given namespace.
func (s nebulaNodeNamespaceLister) List(selector labels.Selector) (ret []*v1.NebulaNode, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NebulaNode))
	})
	return ret, err
}

// Get retrieves the NebulaNode from the indexer for a given namespace and name.
func (s nebulaNodeNamespaceLister) Get(name string) (*v1.NebulaNode, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("nebulanode"), name)
	}
	return obj.(*v1.NebulaNode), nil
}
